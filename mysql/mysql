=============================================================
启动 MySQL 服务，运行 mysql.server
$ mysql.server start

关闭 MySQL，运行：
$ mysql.server stop

你可以了解更多 mysql.server 的命令，运行：
$ mysql.server --help

登录 MySQL, 运行:
$ mysql -uroot -p
Note: 默认情况下，MySQL 用户 root 没有密码，这对本地开发没有关系，但如果你希望修改密码，你可以运行:

$ mysqladmin -u root password 'new-password'

==============================================================
---------------------------
使用 MySQL 数据库  
---------------------------
创建一个数据库  create database 数据库名 [其他选项]
create database samp_db character set gbk;
  
选择所要操作的数据库  
两种方式对数据库进行使用的选择:  
一:  在登录数据库时指定,  命令:  mysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p  
例如登录时选择刚刚创建的数据库:  mysql  -D  samp_db  -u  root  -p  
二:  在登录后使用  use  语句指定,  命令:  use 数据库名;  
use  语句可以不加分号,  执行  use  samp_db  来选择刚刚创建的数据库,  选择成功后会提示:  Database  changed
  
------------------------------
创建数据库表  
------------------------------
使用  create  table  语句可完成对表的创建, 形式: create table 表名称(列声明);  
create table students 
(
id int unsigned not null auto_increment primary key, name char(8) not null,
sex char(4) not null,
age tinyint unsigned not null,
tel char(13) null default "-"
);

对于一些较长的语句在命令提示符下可能容易输错,  因此我们可以通过任何文本编辑器将语句输入好后保 存为  createtable.sql  的文件中,  通过命令提示符下的文件重定向执行执行该脚本。  
打开命令提示符,  输入:  mysql -D samp_db -u root -p < createtable.sql  
(提示:  1.如果连接远程主机请加上  -h  指令;  2.  createtable.sql  文件若不在当前工作目录下需指定文件的 完整路径。)
  
------------------------------
操作 MySQL 数据库
------------------------------

向表中插入数据 
--------------- 
insert  语句可以用来将一行或多行数据插到数据库表中,  使用的一般形式如下:  
insert [into] 表名 [(列名 1, 列名 2, 列名 3, ...)] values (值 1, 值 2, 值 3, ...); 
其中  []  内的内容是可选的
例如:
insert into students values(NULL, "王刚", "男", 20, "13811371377");
insert  into  students  (name,  sex,  age)  values("孙丽华",  "女",  21);   

查询表中的数据 
-------------- 
select  语句常用来根据一定的查询规则到数据库中获取数据,  其基本的用法为:     select 列名称 from 表名称 [查询条件]; 
mysql> select name, age from students;

使用通配符  *  查询表中所有的内容,  
语句:  select  *  from  students; 
 
按特定条件查询:  
where  关键词用于指定查询条件,  用法形式为:  select 列名称 from 表名称 where 条件;
以查询所有性别为女的信息为例:  
输入查询语句:  select  *  from  students  where  sex="女";
--------------------------------------------------------------------------  
where  子句不仅仅支持  "where  列名  =  值"  这种名等于值的查询形式,  对一般的比较运算的运算符都是支 持的,  例如  =、>、<、>=、<、!=  以及一些扩展运算符  is  [not]  null、in、like  等等。  还可以对查询条 件使用  or  和  and  进行组合查询。
--------------------------------------------------------------------------  
示例:  
查询年龄在 21 岁以上的所有人信息:  
select  *  from  students  where  age  >  21;   
查询名字中带有  "王"  字的所有人信息:  
select  *  from  students  where  name  like  "%王%";  
查询 id 小于 5 且年龄大于 20 的所有人信息:  
select  *  from  students  where  id<5  and  age>20; 

更新表中的数据
--------------- 
update  语句可用来修改表中的数据,  
基本的使用形式为:   update 表名称 set 列名称=新值 where 更新条件;   
使用示例:  
将 id 为 5 的手机号改为默认的"-":  
update  students  set  tel=default  where  id=5; 
将所有人的年龄增加 1:  
update  students  set  age=age+1;  
将手机号为  13288097888  的姓名改为  "张伟鹏",  年龄改为  19:  
update  students  set  name="张伟鹏",  a ge=19  where  tel="13288097888";  

删除表中的数据 
-------------- 
delete  语句用于删除表中的数据,  基本用法为:  
delete from 表名称 where 删除条件;  
使用示例:  
删除 id 为 2 的行:  delete  from  students  where  id=2;   删除所有年龄小于 21 岁的数据:  delete  from  students  where  age<20;   删除表中的所有数据:  delete  from  students; 

创建后表的修改  
--------------
alter  table  语句用于创建后对表的修改,  
基础用法如下:   
添加列  
基本形式:  alter table 表名 add 列名 列数据类型 [after 插入位置];  
示例:  
在表的最后追加列  address:  
alter  table  students  add  address  char(60);   
在名为  age  的列后插入列  birthday:  
alter  table  students  add  birthday  date  after  age;  

修改列  
基本形式:  alter table 表名 change 列名称 列新名称 新数据类型;  
示例:   将表  tel  列改名为  telphone:  alter  table  students  change  tel  telphone  char(13)  default  "-";   将  name  列的数据类型改为  char(16):  alter  table  students  change  name  name  char(16)  not  null;  

删除列  
基本形式:  
alter table 表名 drop 列名称;   示例:  
删除  birthday  列:  
alter  table  students  drop  birthday;   重命名表  
基本形式:  
alter table 表名 rename 新表名;  
示例:   重命名  students  表为  workmates:  
alter  table  students  rename  workmates;  
删除整张表  
基本形式:  
drop table 表名;  
示 例 :   删除  workmates  表:  drop  table  workmates;  
删除整个数据库  
基本形式:  drop database 数据库名;  
示 例 :   删除  samp_db  数据库:  drop  database  samp_db;   

